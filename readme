### procedural maze game 

The code base of this game can be found here: [https://github.com/anthony-derose/procedural_dungeonmaze](https://github.com/anthony-derose/procedural_dungeonmaze). A video demo can be found below. 

[![preview of maze](https://img.youtube.com/vi/phpyXQfqfDk/0.jpg)](https://www.youtube.com/watch?v=phpyXQfqfDk)

#### Basic Instructions and Info:
This was developed using Unity3D and C#. 

WASD to move, mouse to move camera
Inspiration:
Infinite dungeon crawlers and
Slender: the eight pages.

The player is spawned in a procedurally generated maze with a
timer clicking down from 100 and a score on the top left
representing gold treasure pieces found. The player wanders the
maze using WASD for movement and the mouse looking around. The
goal is to find the gold treasure pieces before time runs out.

When the player finds a treasure piece, the player will capture
it simply by walking into it. Then, the level will reset with a
new randomly generated maze to find a new treasure piece with
the player retaining their score and the time limit to find
treasure decreasing by 5. This allows the player to have to rush
to find the next treasure piece. This also allows the game to
have infinite levels to an extent of time all of which have a
different procedurally generated maze to solve. There is no win
condition so a player can go on forever.
However, if the player does not solve the maze in time, sadly
they lose.


#### Procedural Generation: 
The main code for randomly generating new, unique, and nonperfect mazes is here and can be found in the MazeData.cs script.

For each grid cell, the code checks if the current cell is
outside the maze (that is, if any of the indexes are at the
boundaries of the array). In this case, assign 1 saying it is a
wall.  Then verify that coordinates are divisible by 2 so you
can keep checking every cell. The emptySpace value allows for
the array to continue on generating an imperfect maze. Lastly,
assign 1 to both the current cell and a random adjacent cell.
The next process was going from what was a console output of =
and ... representing walls to a full mesh maze.

This was done via using many textured quads. Applying graphics
to controller game object and using the c# script titled
MazeMeshGen.cs.
Finally, drawing from other projects in the class setting up the
timer, treasure, starting, score, time, and wasd player
movements was fairly simple.
